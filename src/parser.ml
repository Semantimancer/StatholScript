type token =
  | FLOAT of (float)
  | BOOL of (bool)
  | AOP of (char)
  | BOP of (string)
  | COP of (string)
  | ID of (string)
  | NOT
  | IF
  | THEN
  | ELSE
  | FST
  | SND
  | HEAD
  | TAIL
  | NULL
  | CONS
  | LET
  | EQUAL
  | EQUALITY
  | IN
  | EOL
  | ARROW
  | LAMBDA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | COMMA
  | MINUS

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Types
# 37 "parser.ml"
let yytransl_const = [|
  263 (* NOT *);
  264 (* IF *);
  265 (* THEN *);
  266 (* ELSE *);
  267 (* FST *);
  268 (* SND *);
  269 (* HEAD *);
  270 (* TAIL *);
  271 (* NULL *);
  272 (* CONS *);
  273 (* LET *);
  274 (* EQUAL *);
  275 (* EQUALITY *);
  276 (* IN *);
  277 (* EOL *);
  278 (* ARROW *);
  279 (* LAMBDA *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* LBRACK *);
  283 (* RBRACK *);
  284 (* COMMA *);
  285 (* MINUS *);
    0|]

let yytransl_block = [|
  257 (* FLOAT *);
  258 (* BOOL *);
  259 (* AOP *);
  260 (* BOP *);
  261 (* COP *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\006\000\006\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\006\000\001\000\001\000\003\000\003\000\003\000\
\003\000\004\000\003\000\002\000\002\000\002\000\002\000\003\000\
\005\000\003\000\003\000\006\000\001\000\002\000\003\000\002\000\
\002\000\002\000\004\000\002\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\004\000\005\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\018\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\028\000\000\000\010\000\000\000\031\000\
\000\000\000\000\027\000\017\000\020\000\003\000"

let yydgoto = "\002\000\
\016\000\032\000\041\000\030\000\033\000\045\000"

let yysindex = "\002\000\
\029\000\000\000\000\000\000\000\000\000\050\000\029\000\050\000\
\050\000\050\000\050\000\050\000\252\254\132\255\231\255\000\000\
\250\254\106\255\205\255\007\255\205\255\205\255\205\255\205\255\
\244\254\001\255\014\255\050\000\232\254\253\254\000\000\249\254\
\255\254\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\000\000\029\000\029\000\014\255\002\255\077\255\000\000\029\000\
\000\000\029\000\000\000\158\255\158\255\158\255\205\255\184\255\
\000\000\013\255\008\255\000\000\029\000\000\000\004\255\000\000\
\029\000\029\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\000\063\000\000\000\089\000\115\000\141\000\167\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\003\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\255\219\000\232\000\193\000\206\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\011\000\255\255\000\000\238\255\245\255"

let yytablesize = 525
let yytable = "\018\000\
\047\000\026\000\001\000\048\000\019\000\018\000\021\000\022\000\
\023\000\024\000\025\000\017\000\018\000\018\000\034\000\042\000\
\040\000\020\000\043\000\044\000\050\000\049\000\065\000\061\000\
\029\000\051\000\046\000\066\000\068\000\030\000\029\000\064\000\
\060\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\018\000\018\000\000\000\006\000\006\000\006\000\018\000\000\000\
\018\000\006\000\006\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\063\000\018\000\006\000\006\000\000\000\018\000\
\018\000\006\000\000\000\006\000\006\000\000\000\000\000\067\000\
\000\000\000\000\000\000\069\000\070\000\003\000\004\000\035\000\
\036\000\037\000\005\000\006\000\007\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\038\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\014\000\062\000\015\000\000\000\
\000\000\040\000\003\000\004\000\035\000\036\000\037\000\005\000\
\006\000\007\000\000\000\000\000\008\000\009\000\010\000\011\000\
\012\000\038\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\014\000\000\000\015\000\003\000\004\000\040\000\000\000\
\000\000\005\000\006\000\007\000\000\000\000\000\008\000\009\000\
\010\000\011\000\012\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\027\000\014\000\000\000\015\000\003\000\004\000\
\028\000\000\000\000\000\005\000\006\000\007\000\000\000\000\000\
\008\000\009\000\010\000\011\000\012\000\038\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\014\000\000\000\015\000\
\003\000\004\000\040\000\000\000\000\000\005\000\006\000\007\000\
\000\000\000\000\008\000\009\000\010\000\011\000\012\000\038\000\
\000\000\000\000\000\000\000\000\000\000\003\000\004\000\014\000\
\000\000\015\000\005\000\006\000\040\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\015\000\003\000\
\004\000\040\000\000\000\000\000\005\000\006\000\007\000\000\000\
\000\000\008\000\009\000\010\000\011\000\012\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\015\000\031\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
\014\000\000\000\000\000\014\000\014\000\014\000\000\000\000\000\
\014\000\014\000\014\000\014\000\014\000\003\000\004\000\000\000\
\000\000\000\000\005\000\006\000\007\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\000\000\013\000\000\000\000\000\
\000\000\000\000\003\000\004\000\014\000\000\000\015\000\005\000\
\006\000\007\000\000\000\000\000\008\000\009\000\010\000\011\000\
\012\000\015\000\015\000\015\000\000\000\000\000\015\000\015\000\
\015\000\014\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\015\000\015\000\015\000\000\000\000\000\000\000\015\000\
\000\000\015\000\015\000\024\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\024\000\024\000\000\000\000\000\
\000\000\024\000\000\000\024\000\024\000\025\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\
\000\000\000\000\000\000\025\000\000\000\025\000\025\000\012\000\
\012\000\012\000\000\000\000\000\012\000\012\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\012\000\012\000\000\000\000\000\000\000\012\000\000\000\012\000\
\012\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\000\000\000\000\000\000\013\000\
\000\000\013\000\013\000\016\000\016\000\016\000\000\000\000\000\
\016\000\016\000\016\000\000\000\000\000\000\000\000\000\000\000\
\011\000\011\000\011\000\016\000\016\000\016\000\011\000\011\000\
\000\000\016\000\000\000\016\000\016\000\007\000\007\000\007\000\
\011\000\011\000\011\000\007\000\007\000\000\000\011\000\000\000\
\011\000\011\000\008\000\008\000\008\000\000\000\007\000\007\000\
\008\000\008\000\000\000\007\000\000\000\007\000\007\000\000\000\
\000\000\002\000\002\000\008\000\008\000\000\000\000\000\000\000\
\008\000\000\000\008\000\008\000\002\000\002\000\000\000\000\000\
\000\000\002\000\000\000\002\000\002\000"

let yycheck = "\001\000\
\025\001\006\001\001\000\028\001\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\001\000\014\000\015\000\021\001\009\001\
\029\001\007\000\018\001\006\001\028\001\025\001\010\001\022\001\
\014\000\027\001\028\000\020\001\025\001\027\001\022\001\050\000\
\044\000\035\000\036\000\037\000\038\000\039\000\040\000\255\255\
\042\000\043\000\255\255\003\001\004\001\005\001\048\000\255\255\
\050\000\009\001\010\001\255\255\042\000\043\000\255\255\255\255\
\255\255\255\255\048\000\061\000\020\001\021\001\255\255\065\000\
\066\000\025\001\255\255\027\001\028\001\255\255\255\255\061\000\
\255\255\255\255\255\255\065\000\066\000\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\026\001\255\255\
\255\255\029\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\024\001\255\255\026\001\001\001\002\001\029\001\255\255\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\255\255\026\001\001\001\002\001\
\029\001\255\255\255\255\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\001\001\002\001\029\001\255\255\255\255\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\024\001\
\255\255\026\001\006\001\007\001\029\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\001\001\
\002\001\029\001\255\255\255\255\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\027\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\255\255\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\255\255\255\255\
\255\255\255\255\001\001\002\001\024\001\255\255\026\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\024\001\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\255\255\255\255\255\255\025\001\255\255\027\001\028\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\003\001\004\001\005\001\019\001\020\001\021\001\009\001\010\001\
\255\255\025\001\255\255\027\001\028\001\003\001\004\001\005\001\
\019\001\020\001\021\001\009\001\010\001\255\255\025\001\255\255\
\027\001\028\001\003\001\004\001\005\001\255\255\020\001\021\001\
\009\001\010\001\255\255\025\001\255\255\027\001\028\001\255\255\
\255\255\009\001\010\001\020\001\021\001\255\255\255\255\255\255\
\025\001\255\255\027\001\028\001\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001"

let yynames_const = "\
  NOT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FST\000\
  SND\000\
  HEAD\000\
  TAIL\000\
  NULL\000\
  CONS\000\
  LET\000\
  EQUAL\000\
  EQUALITY\000\
  IN\000\
  EOL\000\
  ARROW\000\
  LAMBDA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  MINUS\000\
  "

let yynames_block = "\
  FLOAT\000\
  BOOL\000\
  AOP\000\
  BOP\000\
  COP\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'headEx) in
    Obj.repr(
# 51 "parser.mly"
                                    ( _1 )
# 303 "parser.ml"
               : Types.resultS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                    ( _1 )
# 310 "parser.ml"
               : 'headEx))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'headEx) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'headEx) in
    Obj.repr(
# 56 "parser.mly"
                                    ( LetS (_2,_4,_6) )
# 319 "parser.ml"
               : 'headEx))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 60 "parser.mly"
                                    ( NumS _1 )
# 326 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 61 "parser.mly"
                                    ( BoolS _1 )
# 333 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                                    ( AopS (_2,_1,_3) )
# 342 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                                    ( BopS (_2,_1,_3) )
# 351 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                    ( CopS (_2,_1,_3) )
# 360 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                                    ( AopS ('-',_1,_3) )
# 368 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                                    ( AopS ('-',NumS 0.,_3) )
# 375 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                    ( EqualS (_1,_3) )
# 383 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                    ( HeadS _2 )
# 390 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                    ( TailS _2 )
# 397 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                                    ( NullS _2 )
# 404 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                                    ( NotS _2 )
# 411 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                                    ( ConsS (_1,_3) )
# 419 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'headEx) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'headEx) in
    Obj.repr(
# 73 "parser.mly"
                                        ( ParS (_2,_4) )
# 427 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fundef) in
    Obj.repr(
# 74 "parser.mly"
                                    ( _2 )
# 434 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'headEx) in
    Obj.repr(
# 75 "parser.mly"
                                    ( _2 )
# 441 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'headEx) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'headEx) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'headEx) in
    Obj.repr(
# 76 "parser.mly"
                                          ( IfS (_2,_4,_6) )
# 450 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                                    ( VarS _1 )
# 457 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                                    ( ListS [] )
# 463 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expList) in
    Obj.repr(
# 79 "parser.mly"
                                    ( ListS (_2) )
# 470 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                    ( FstS _2 )
# 477 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                                    ( SndS _2 )
# 484 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                    ( AppS (_1,_2) )
# 492 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'idlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'headEx) in
    Obj.repr(
# 86 "parser.mly"
                                    ( FunS (None,_2,_4) )
# 500 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 90 "parser.mly"
                                    ( _1 :: _2 )
# 508 "parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                                    ( [_1] )
# 515 "parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'headEx) in
    Obj.repr(
# 95 "parser.mly"
                                    ( [_1] )
# 522 "parser.ml"
               : 'expList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'headEx) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expList) in
    Obj.repr(
# 96 "parser.mly"
                                    ( _1 :: _3 )
# 530 "parser.ml"
               : 'expList))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.resultS)
